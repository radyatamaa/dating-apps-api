// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/zaplogger/zaplogger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	zaplogger "github.com/radyatamaa/dating-apps-api/pkg/zaplogger"
	zap "go.uber.org/zap"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Desugar mocks base method.
func (m *MockLogger) Desugar() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Desugar")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Desugar indicates an expected call of Desugar.
func (mr *MockLoggerMockRecorder) Desugar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desugar", reflect.TypeOf((*MockLogger)(nil).Desugar))
}

// Error mocks base method.
func (m *MockLogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), args...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), args...)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// GrpcClientInterceptorLogger mocks base method.
func (m *MockLogger) GrpcClientInterceptorLogger(method string, req, reply interface{}, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcClientInterceptorLogger", method, req, reply, time, metaData, err)
}

// GrpcClientInterceptorLogger indicates an expected call of GrpcClientInterceptorLogger.
func (mr *MockLoggerMockRecorder) GrpcClientInterceptorLogger(method, req, reply, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientInterceptorLogger", reflect.TypeOf((*MockLogger)(nil).GrpcClientInterceptorLogger), method, req, reply, time, metaData, err)
}

// GrpcMiddlewareAccessLogger mocks base method.
func (m *MockLogger) GrpcMiddlewareAccessLogger(method string, time time.Duration, metaData map[string][]string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcMiddlewareAccessLogger", method, time, metaData, err)
}

// GrpcMiddlewareAccessLogger indicates an expected call of GrpcMiddlewareAccessLogger.
func (mr *MockLoggerMockRecorder) GrpcMiddlewareAccessLogger(method, time, metaData, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcMiddlewareAccessLogger", reflect.TypeOf((*MockLogger)(nil).GrpcMiddlewareAccessLogger), method, time, metaData, err)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// KafkaLogCommittedMessage mocks base method.
func (m *MockLogger) KafkaLogCommittedMessage(topic string, partition int, offset int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KafkaLogCommittedMessage", topic, partition, offset)
}

// KafkaLogCommittedMessage indicates an expected call of KafkaLogCommittedMessage.
func (mr *MockLoggerMockRecorder) KafkaLogCommittedMessage(topic, partition, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaLogCommittedMessage", reflect.TypeOf((*MockLogger)(nil).KafkaLogCommittedMessage), topic, partition, offset)
}

// KafkaProcessMessage mocks base method.
func (m *MockLogger) KafkaProcessMessage(topic string, partition int, message string, workerID int, offset int64, time time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KafkaProcessMessage", topic, partition, message, workerID, offset, time)
}

// KafkaProcessMessage indicates an expected call of KafkaProcessMessage.
func (mr *MockLoggerMockRecorder) KafkaProcessMessage(topic, partition, message, workerID, offset, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaProcessMessage", reflect.TypeOf((*MockLogger)(nil).KafkaProcessMessage), topic, partition, message, workerID, offset, time)
}

// Panicf mocks base method.
func (m *MockLogger) Panicf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf.
func (mr *MockLoggerMockRecorder) Panicf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockLogger)(nil).Panicf), varargs...)
}

// SetMessageLog mocks base method.
func (m *MockLogger) SetMessageLog(err error, depthList ...int) *zaplogger.ListErrors {
	m.ctrl.T.Helper()
	varargs := []interface{}{err}
	for _, a := range depthList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMessageLog", varargs...)
	ret0, _ := ret[0].(*zaplogger.ListErrors)
	return ret0
}

// SetMessageLog indicates an expected call of SetMessageLog.
func (mr *MockLoggerMockRecorder) SetMessageLog(err interface{}, depthList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err}, depthList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageLog", reflect.TypeOf((*MockLogger)(nil).SetMessageLog), varargs...)
}

// Sync mocks base method.
func (m *MockLogger) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockLoggerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockLogger)(nil).Sync))
}

// WarnMsg mocks base method.
func (m *MockLogger) WarnMsg(msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnMsg", msg, err)
}

// WarnMsg indicates an expected call of WarnMsg.
func (mr *MockLoggerMockRecorder) WarnMsg(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnMsg", reflect.TypeOf((*MockLogger)(nil).WarnMsg), msg, err)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// WithFields mocks base method.
func (m *MockLogger) WithFields(keyValues zaplogger.Fields) zaplogger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", keyValues)
	ret0, _ := ret[0].(zaplogger.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockLoggerMockRecorder) WithFields(keyValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), keyValues)
}

// WithName mocks base method.
func (m *MockLogger) WithName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithName", name)
}

// WithName indicates an expected call of WithName.
func (mr *MockLoggerMockRecorder) WithName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockLogger)(nil).WithName), name)
}

