// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt/jwt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/radyatamaa/dating-apps-api/pkg/jwt"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// Ctx mocks base method.
func (m *MockJWT) Ctx(ctx context.Context) jwt.JWT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ctx", ctx)
	ret0, _ := ret[0].(jwt.JWT)
	return ret0
}

// Ctx indicates an expected call of Ctx.
func (mr *MockJWTMockRecorder) Ctx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ctx", reflect.TypeOf((*MockJWT)(nil).Ctx), ctx)
}

// DestroyIdentity mocks base method.
func (m *MockJWT) DestroyIdentity(issuer, identity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyIdentity", issuer, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyIdentity indicates an expected call of DestroyIdentity.
func (mr *MockJWTMockRecorder) DestroyIdentity(issuer, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyIdentity", reflect.TypeOf((*MockJWT)(nil).DestroyIdentity), issuer, identity)
}

// DestroyToken mocks base method.
func (m *MockJWT) DestroyToken(r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyToken", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyToken indicates an expected call of DestroyToken.
func (mr *MockJWTMockRecorder) DestroyToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyToken", reflect.TypeOf((*MockJWT)(nil).DestroyToken), r)
}

// GenerateToken mocks base method.
func (m *MockJWT) GenerateToken(payload jwt.Payload, issuer string, expiredTime int) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", payload, issuer, expiredTime)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTMockRecorder) GenerateToken(payload, issuer, expiredTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWT)(nil).GenerateToken), payload, issuer, expiredTime)
}

// GetIdentity mocks base method.
func (m *MockJWT) GetIdentity(r *http.Request, ignoreExpired ...bool) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r}
	for _, a := range ignoreExpired {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentity", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockJWTMockRecorder) GetIdentity(r interface{}, ignoreExpired ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r}, ignoreExpired...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockJWT)(nil).GetIdentity), varargs...)
}

// GetPayload mocks base method.
func (m *MockJWT) GetPayload(r *http.Request, ignoreExpired ...bool) (jwt.Payload, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r}
	for _, a := range ignoreExpired {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayload", varargs...)
	ret0, _ := ret[0].(jwt.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayload indicates an expected call of GetPayload.
func (mr *MockJWTMockRecorder) GetPayload(r interface{}, ignoreExpired ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r}, ignoreExpired...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockJWT)(nil).GetPayload), varargs...)
}

// GetToken mocks base method.
func (m *MockJWT) GetToken(r *http.Request, expiredTime int, ignoreExpired ...bool) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r, expiredTime}
	for _, a := range ignoreExpired {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetToken", varargs...)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockJWTMockRecorder) GetToken(r, expiredTime interface{}, ignoreExpired ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r, expiredTime}, ignoreExpired...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockJWT)(nil).GetToken), varargs...)
}

// Middleware mocks base method.
func (m *MockJWT) Middleware(r *http.Request) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", r)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Middleware indicates an expected call of Middleware.
func (mr *MockJWTMockRecorder) Middleware(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockJWT)(nil).Middleware), r)
}

// MiddlewareRPCAuth mocks base method.
func (m *MockJWT) MiddlewareRPCAuth(ctx context.Context, token string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MiddlewareRPCAuth", ctx, token)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MiddlewareRPCAuth indicates an expected call of MiddlewareRPCAuth.
func (mr *MockJWTMockRecorder) MiddlewareRPCAuth(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MiddlewareRPCAuth", reflect.TypeOf((*MockJWT)(nil).MiddlewareRPCAuth), ctx, token)
}

// RefreshToken mocks base method.
func (m *MockJWT) RefreshToken(r *http.Request, expiredTime int) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", r, expiredTime)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockJWTMockRecorder) RefreshToken(r, expiredTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockJWT)(nil).RefreshToken), r, expiredTime)
}

// RetreadToken mocks base method.
func (m *MockJWT) RetreadToken(token string, expiredTime int, ignoreExpired ...bool) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{token, expiredTime}
	for _, a := range ignoreExpired {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetreadToken", varargs...)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetreadToken indicates an expected call of RetreadToken.
func (mr *MockJWTMockRecorder) RetreadToken(token, expiredTime interface{}, ignoreExpired ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{token, expiredTime}, ignoreExpired...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetreadToken", reflect.TypeOf((*MockJWT)(nil).RetreadToken), varargs...)
}

// SetAdapter mocks base method.
func (m *MockJWT) SetAdapter(adapter jwt.Adapter) jwt.JWT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAdapter", adapter)
	ret0, _ := ret[0].(jwt.JWT)
	return ret0
}

// SetAdapter indicates an expected call of SetAdapter.
func (mr *MockJWTMockRecorder) SetAdapter(adapter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdapter", reflect.TypeOf((*MockJWT)(nil).SetAdapter), adapter)
}

