// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	context "github.com/beego/beego/v2/server/web/context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/radyatamaa/dating-apps-api/internal/domain"
)

// MockUserUseCase is a mock of UseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserUseCase) Login(beegoCtx *context.Context, request domain.LoginRequest) (*domain.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", beegoCtx, request)
	ret0, _ := ret[0].(*domain.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUseCaseMockRecorder) Login(beegoCtx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), beegoCtx, request)
}

// PurchasePremiumUpdateStatus mocks base method.
func (m *MockUserUseCase) PurchasePremiumUpdateStatus(beegoCtx *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchasePremiumUpdateStatus", beegoCtx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurchasePremiumUpdateStatus indicates an expected call of PurchasePremiumUpdateStatus.
func (mr *MockUserUseCaseMockRecorder) PurchasePremiumUpdateStatus(beegoCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchasePremiumUpdateStatus", reflect.TypeOf((*MockUserUseCase)(nil).PurchasePremiumUpdateStatus), beegoCtx)
}

// Register mocks base method.
func (m *MockUserUseCase) Register(beegoCtx *context.Context, request domain.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", beegoCtx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCaseMockRecorder) Register(beegoCtx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), beegoCtx, request)
}

